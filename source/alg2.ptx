<section xml:id="algebra2">
<title>Permutations and Presentations</title>

<objectives>
    <ol>
        <li>
            <p>Simplify, solve, and describe algebraic structure in subgroups of permutation groups, using “braid-a-grams”, cycle notation, and/or the Coxeter presentation.
            </p>
        </li>
    </ol>       
</objectives>

<p>One of the richest algebraic structures with a finite set of elements is that which describes permutations (rearrangements) of those elements. We can begin by thinking of this structure in terms of anagrams of English words.</p>


<video youtube="oMVLkp75nSU"/>

<definition xml:id="def_anagram">
    <statement>
        <p>Let <m>X = \{1,2,\ldots,n\}</m> be an enumerated finite set. A <term>permutation of n symbols</term> is a bijective function <m>\sigma \colon X\to X</m>.</p>
    </statement>
</definition>

<p>In other words, a permutation of <m>n</m> symbols is a way of rearranging all the numbers <m>1</m> through <m>n</m> (called the <q>positions</q> of the permutation) so that no two positions end up in the same spot: <me>\text{If } i\neq j \text{ then } \sigma(i) \neq \sigma(j).</me></p> 

 <example xml:id="ex_permutation">
    <statement>
        <p>An example of a permutation of five symbols might be the function <m>\sigma \colon \{1,2,3,4,5\} \to \{1,2,3,4,5\}</m> for which <md><mrow>\sigma(1) \amp= 2</mrow><mrow>\sigma(2) \amp= 1</mrow><mrow>\sigma(3) \amp= 5</mrow><mrow>\sigma(4) \amp= 3</mrow><mrow>\sigma(5) \amp= 4.</mrow></md>
        Note that no two <q>starting</q> positions have the same <q>ending</q> position.</p>

        <p>If instead of the numbers <m>1</m> through <m>5</m> we had used the letters of the word <m>ALERT</m> as the elements of our set, we would obtain 
        <md><mrow>\sigma(A) \amp= L</mrow><mrow>\sigma(L) \amp= A</mrow><mrow>\sigma(E) \amp= T</mrow><mrow>\sigma(R) \amp= E</mrow><mrow>\sigma(T) \amp= R.</mrow></md>
        In this way, anagrams of English words can be understood as permutations on the set of its letters. (We will typically use words that do not have any repeated letters -- otherwise, we might be unable to define the permutation uniquely!)
        </p>
    </statement>
</example>

<activity xml:id="act_perm1">
    <statement>
        <ol>
            <li>
            <p>Find at least two anagrams of the word <m>LEAST</m> that are dictionary English words.</p>
            </li>
            <li>
                <p>Give step-by-step instructions for how you would perform the anagram <m>STONE \mapsto ONSET</m> by moving one letter at a time, but <em>without</em> mentioning any of the letters by name.</p>
            </li>
            <li>
                <p>Give step-by-step instructions for how you would perform the anagram <m>SHALE \mapsto LEASH</m> by moving one letter at a time, but <em>without</em> mentioning any of the letters by name.</p>
            </li>
        </ol>
    </statement>
</activity>

<p>You may remember from finite mathematics that there are <m>n! = n(n-1)(n-2)\cdots(2)(1)</m> different permutations for a set of <m>n</m> symbols. Taken together with the <em>composition of functions</em> operation -- that is, perform one permutation and then another permutation, using the result of the former as the input for the latter -- we have an algebraic structure.</p>

<definition xml:id="def_permgroup">
    <statement>
        <p>Let <m>S_n</m> denote the set of all permutations on <m>n</m> symbols. Together with the composition of functions operation <m>\circ : (\sigma,\tau) \mapsto \sigma\circ\tau</m>, we call <m>(S_n,\circ)</m> the <term>permutation group on n symbols</term>.</p>
    </statement>
</definition>

<p>You might notice that <xref ref="def_permgroup"/> is more than a definition -- it is a theorem in disguise! This is because of the word <term>group</term>: the magma <m>(S_n,\circ)</m> is associative, it has the identity property via the <q>trivial permutation</q> <mdn><mrow xml:id="eq_identitypermutation">\epsilon(1) = 1, \quad \epsilon(2)=2, \quad \ldots \quad, \epsilon(n)=n</mrow></mdn>, and it has the invertibility property: anything a permutation does, can be undone.</p>

<example xml:id="ex_permutations">
    <title>Composition, identity, inverse permutations</title>
    <statement>
        <p>The permutation <m>\sigma \in S_4</m> defined by <me>\sigma(1)=3,\quad \sigma(2)=4,\quad \sigma(3)=2, \quad \sigma(4)=1</me>
        performs, for example, the anagram <m>TEAM \mapsto MATE</m>.</p>
        <p>We can perform the composition <m>\sigma\circ \sigma</m> by applying the permutation <m>\sigma</m> to the <em>result</em> of having applied <m>\sigma</m>:</p>
        <figure xml:id="gif_composition">
            <caption>Forming the composition <m>\sigma\circ\sigma</m> using a <xref ref="def_braidagram" text="custom">braid-a-gram</xref>.</caption>
            <image source="images/gif_composition.gif" width="70%"/>
        </figure>
        <p>If we write <m>\tau = \sigma\circ\sigma</m> for this permutation, then we have <me>\tau(1)=2,\quad \tau(2)=1,\quad \tau(3)=4,\quad \tau(4)=3.</me></p>
        <p>The identity permutation <xref ref="eq_identitypermutation"/> is an identity element because composition with <m>\epsilon</m> does not change a permutation. For example: </p>
        <figure xml:id="gif_identity">
            <caption>Demonstrating that the <xref ref="eq_identitypermutation" text="custom">trivial permutation</xref> is an identity element.</caption>
            <image source="images/gif_identity.gif" width="75%"/>
        </figure>
        <p>By <q>flipping</q> one of these diagrams upside-down, we can show that permutations are invertible as well.</p>
        <figure xml:id="gif_inverse">
            <caption>Finding an inverse permutation <m>\tau</m> for <m>\sigma</m>.</caption>
            <image source="images/gif_inverse.gif" width="75%"/>
        </figure>
        <p>You should check that both of the above diagrams depict the <xref ref="eq_identitypermutation" text="custom">identity permutation</xref>, even though the elements on which they act appear in different orders, and the curves in the diagrams cross over each other a lot! You can also check that the inverse permutation <m>\tau</m> for our <m>\sigma</m> satisfies <me>\tau(1)=4,\quad \tau(2)=3,\quad \tau(3)=1, \quad \tau(4)=2.</me></p>
    </statement>
</example>

<activity xml:id="act_permprop1">
    <statement>
        <ol>
        <li>
        <p>Refer to your step-by-step instructions for the permutation <m>STONE\mapsto ONSET</m> in <xref ref="act_perm1"/>. What is the result of applying the <em>same</em> instructions to the beginning word <m>ONSET</m> instead? Sketch a diagram that shows how each letter moves, from beginning to end of <m>STONE \mapsto ONSET \mapsto ?????</m>
        </p>
        </li>
        <li>
        <p>Refer to your step-by-step instructions for the permutation <m>SHALE\mapsto LEASH</m> in <xref ref="act_perm1"/>. What is the result of applying the <em>same</em> instructions to the beginning word <m>LEASH</m> instead? Sketch a diagram that shows how each letter moves, from beginning to end of <m>SHALE \mapsto LEASH \mapsto ?????</m>
        </p>
        </li>
        <li>
        <p>What do your answers tell you about whether the permutations you found are invertible?</p>
        </li>
        </ol>
    </statement>
</activity>

<p>The diagrams you sketched in <xref ref="act_permprop1"/> are called <q>braid-a-grams</q>, and give us a convenient way to analyze and dissect permutations.</p>

<definition xml:id="def_braidagram">
    <statement>
        <p>
            Let <m>\sigma \in S_n</m> be a permutation on <m>n</m> symbols. A <term>braid-a-gram</term> for <m>\sigma</m> is a diagram in which each initial position <m>i</m> is joined by a curve to its final position <m>\sigma(i)</m>, and in which each <em>crossing</em> of two curves occurs at a different height in the diagram.
        </p>
    </statement>
</definition>

<p>A braid-a-gram for the permutation <m>SOBER \mapsto ROBES</m> is shown below.

</p>
<figure xml:id="fig_sober">
    <image source="http://matthematics.com/redoak/images/sober.jpg" width="30%"/>
    <caption>A braid-a-gram for <m>\sigma \colon SOBER \mapsto ROBES</m>.</caption>
</figure>

<activity xml:id="act_braidagram1">
    <statement>
        <p>Use the braid-a-gram above, reading it from top to bottom, to describe step-by-step how this permutation can be achieved only by <em>interchanging adjacent strands</em>. For example, the first step might be <q>swap the 4th and 5th strands</q>. 
       </p>
       <p>Then, sketch a <em>different</em> braid-a-gram for this permutation and repeat the above question. 
       </p>
    </statement>
</activity>

<p>The fact that <xref ref="act_braidagram1"/> is even possible to begin with points to a very deep result in the theory of permutations.</p>

<definition xml:id="def_cycle">
    <statement>
        <p>A permutation <m>\sigma \in S_n</m> is called a <m>k</m>-<term>cycle</term> if there exists a sequence of <m>k</m> positions <m>x_1,x_2,\ldots,x_k</m> such that <me>\sigma(x_1) = x_2, \quad \sigma(x_2) = x_3, \quad \ldots , \sigma(x_{k-1}) = x_k, \quad \sigma(x_k) = x_1.</me>
        We denote the above <m>k</m>-cycle using <term>cycle notation</term> as <me>\sigma = \bigl( x_1\, x_2\, \cdots\, x_k \bigr).</me>
        When <m>k=2</m> we call the cycle a <term>transposition</term>.</p>
    </statement>
</definition>

<p>For example, the anagram <m>ALERT \mapsto LATER</m> from <xref ref="ex_permutation"/> can be expressed in cycle notation as <m>\sigma = (12)(345)</m>.</p>

<activity xml:id="act_cycle">
    <statement>
        <p>Determine cycle notation for the permutations <m>STONE \mapsto ONSET</m> and <m>SHALE\mapsto LEASH</m> you studied in <xref ref="act_perm1"/>.
        </p>
    </statement>
</activity>

<activity xml:id="act_cycle2">
    <statement>
        <p>Determine two different cycle notation expressions for the permutation <m>SOBER \mapsto ROBES</m> you studied in <xref ref="act_braidagram1"/>.
        </p>
    </statement>
</activity>

<p>The main result we're seeing here is the following theorem.</p> 

<theorem xml:id="thm_adjacent">
    <statement>
        <p>Every permutation of <m>n</m> symbols can be written as a composition of adjacent transpositions.</p>
    </statement>
</theorem>

<p>Since the adjacent transpositions play such an important role in permutations, we'll use the shorthand <me>\sigma_i = \bigl(i\;i+1\bigr)</me> to denote the transposition that swaps the <m>i</m>-th position with its neighbor to the right.</p>

<activity xml:id="act_cox1">
	<statement>
		<p>The <xref ref="eq_identitypermutation" text="custom">identity permutation</xref> performs the rather-uninteresting anagram <m>BEARS \mapsto BEARS</m>.
			<ol>
				<li>
					<p>Sketch a braid-a-gram for this anagram which includes <em>at least one</em> crossing, but <em>as few as possible</em>.</p>
				</li>
				<li>
					<p>Express your answer to part (a) as an equation involving the adjacent transpositions <m>\sigma_1,\sigma_2,\sigma_3,\sigma_4,</m> and/or the trivial permutation <m>\epsilon</m>.</p>
				</li>
				<li>
					<p>Are there other solutions besides the one you found? Describe how your result might be generalized.</p>
				</li>
			</ol>
		</p>
	</statement>
</activity>

<activity xml:id="act_cox2">
	<statement>
		<p>Let <m>\sigma\in S_4</m> be the permutation that performs the anagram <m>\sigma \colon OGRE \mapsto GOER</m>.
			<ol>
				<li>
					<p>Sketch <em>two different</em> braid-a-grams for <m>\sigma</m>, using as few crossings as possible.</p>
				</li>
				<li>
					<p>Express your answer to part (a) as an equation involving the adjacent transpositions <m>\sigma_1,\sigma_2,\sigma_3,\sigma_4,</m> and/or the trivial permutation <m>\epsilon</m>.</p>
				</li>
				<li>
					<p>Describe how your result might be generalized for anagrams of any number of letters.</p>
				</li>
			</ol>
		</p>
	</statement>
	<hint>
		<p>Recall that in a braid-a-gram, each crossing must be sketched at a <em>different</em> height.</p>
	</hint>
</activity>
<activity xml:id="act_cox3">
	<statement>
		<p>Let <m>\sigma\in S_5</m> be the permutation that performs the anagram <m>\sigma \colon TONES \mapsto NOTES</m>.
			<ol>
				<li>
					<p>Sketch <em>two different</em> braid-a-grams for <m>\sigma</m>, using as few crossings as possible.</p>
				</li>
				<li>
					<p>Express your answer to part (a) as an equation involving the adjacent transpositions <m>\sigma_1,\sigma_2,\sigma_3,\sigma_4,</m> and/or the trivial permutation <m>\epsilon</m>.</p>
				</li>
				<li>
					<p>Describe how your result might be generalized for anagrams of any number of letters.</p>
				</li>
			</ol>
		</p>
	</statement>
	<hint>
		<p>Recall that in a braid-a-gram, each crossing must be sketched at a <em>different</em> height.</p>
	</hint>
</activity>

<theorem xml:id="thm_coxeter">
    <title>Coxeter Presentation</title>

    <statement>
        <p>Let <m>S_n</m> be the permutation group on <m>n</m> symbols, and denote by <m>\sigma_i = ( i, i+1 )</m> the <m>i</m>-th adjacent transposition for <m>1 \leq i \leq n-1</m>.</p>
        <statement>Then every permutation <m>\sigma\in S_n</m> can be expressed as a product <me>\sigma = \sigma_{i_1}\circ \sigma_{i_2} \circ \cdots \circ \sigma_{i_k}.</me>
        Furthermore, the transpositions <m>\sigma_i</m> satisfy the following relations.</statement>
        <mdn>
            <mrow xml:id="eq_cox1">\sigma_i^2 \amp= \epsilon \amp\amp \text{for all }1 \leq i \leq n-1.</mrow>
            <mrow xml:id="eq_cox2">\sigma_i\sigma_j \amp= \sigma_j\sigma_i \amp\amp \text{for all }|i-j| \geq 2.</mrow>
            <mrow xml:id="eq_cox3">\sigma_i\sigma_{i+1}\sigma_i \amp= \sigma_{i+1}\sigma_i\sigma_{i+1} \amp\amp \text{for all }1 \leq i \leq n-2.</mrow>
        </mdn>
    </statement>
    <proof>
        <p>We will take the procedure you used in <xref ref="act_braidagram1"/> as proof of the assertion that every permutation can be written in terms of adjacent transpositions.</p>
        <p>The braid-a-grams shown below suggest the proofs of the three relations.</p>
        <figure xml:id="fig_coxproof">
            <caption>Braid-a-gram <q>proofs</q> of the Coxeter relations.</caption>
            <image source="images/gif_coxeter.gif" width="95%"/>
        </figure>
    </proof>
</theorem>

<p>Taken in total, the <xref ref="thm_coxeter" text="title"/> assures us that we can understand the algebraic structure of permutation groups merely by describing the ways that the adjacent transpositions interact. For example, a complete operation table for the permutation group <m>S_3</m> is shown below.</p>
<table xml:id="table_s3"><title>Operation table for the permutation group <m>S_3</m></title>
  <tabular>
    <row bottom="medium">
      <cell right="medium">
        <m>(S_3,\circ)</m>
      </cell>
      <cell>
        <m>\epsilon</m>
      </cell>
      <cell>
        <m>\sigma_1</m>
      </cell>
      <cell>
        <m>\sigma_2</m>
      </cell>
      <cell>
        <m>\sigma_1\sigma_2</m>
      </cell>
      <cell>
        <m>\sigma_2\sigma_1</m>
      </cell>
      <cell>
        <m>\sigma_1\sigma_2\sigma_1</m>
      </cell>
    </row>
    <row>
      <cell right="medium">
        <m>\epsilon</m>
      </cell>
      <cell>
        <m>\epsilon</m>
      </cell>
      <cell>
        <m>\sigma_1</m>
      </cell>
      <cell>
        <m>\sigma_2</m>
      </cell>
      <cell>
        <m>\sigma_1\sigma_2</m>
      </cell>
      <cell>
        <m>\sigma_2\sigma_1</m>
      </cell>
      <cell>
        <m>\sigma_1\sigma_2\sigma_1</m>
      </cell>
    </row>
    <row>
      <cell right="medium">
        <m>\sigma_1</m>
      </cell>
      <cell><m>\sigma_1</m>
      </cell>
      <cell><m>\epsilon</m>
      </cell>
      <cell><m>\sigma_1\sigma_2</m>
      </cell>
      <cell><m>\sigma_2</m>
      </cell>
      <cell><m>\sigma_1\sigma_2\sigma_1</m>
      </cell>
      <cell><m>\sigma_2\sigma_1</m>
      </cell>
    </row>
    <row>
      <cell right="medium">
        <m>\sigma_2</m>
      </cell>
      <cell><m>\sigma_2</m>
      </cell>
      <cell><m>\sigma_2\sigma_1</m>
      </cell>
      <cell><m>\epsilon</m>
      </cell>
      <cell><m>\sigma_1\sigma_2\sigma_1</m>
      </cell>
      <cell><m>\sigma_1</m>
      </cell>
      <cell><m>\sigma_1\sigma_2</m>
      </cell>
    </row>
    <row>
      <cell right="medium">
        <m>\sigma_1\sigma_2</m>
      </cell>
      <cell><m>\sigma_1\sigma_2</m>
      </cell>
      <cell><m>\sigma_1\sigma_2\sigma_1</m>
      </cell>
      <cell><m>\sigma_1</m>
      </cell>
      <cell><m>\sigma_2\sigma_1</m>
      </cell>
      <cell><m>\epsilon</m>
      </cell>
      <cell><m>\sigma_2</m>
      </cell>
    </row>
    <row>
      <cell right="medium">
        <m>\sigma_2\sigma_1</m>
      </cell>
      <cell><m>\sigma_2\sigma_1</m>
      </cell>
      <cell><m>\sigma_2</m>
      </cell>
      <cell><m>\sigma_1\sigma_2\sigma_1</m>
      </cell>
      <cell><m>\epsilon</m>
      </cell>
      <cell><m>\sigma_1\sigma_2</m>
      </cell>
      <cell><m>\sigma_1</m>
      </cell>
    </row>
    <row>
      <cell right="medium">
        <m>\sigma_1\sigma_2\sigma_1</m>
      </cell>
      <cell><m>\sigma_1\sigma_2\sigma_1</m>
      </cell>
      <cell><m>\sigma_1\sigma_2</m>
      </cell>
      <cell><m>\sigma_2\sigma_1</m>
      </cell>
      <cell><m>\sigma_1</m>
      </cell>
      <cell><m>\sigma_2</m>
      </cell>
      <cell><m>\epsilon</m>
      </cell>
    </row>
  </tabular>
</table>

<activity xml:id="act_usecox">
	<statement>
		<p>Use the <xref ref="thm_coxeter" text="title"/> to explicitly verify each of the entries in the bottom row of <xref ref="table_s3"/>.</p>
	</statement>
	<hint>
		<p>For example, how do the three relations <xref ref="eq_cox1"/>, <xref ref="eq_cox2"/>, <xref ref="eq_cox3"/> help us to simplify the product <me>(\sigma_1\sigma_2\sigma_1)\, (\sigma_2\sigma_1) = \sigma_2\qquad ?</me></p>
	</hint>
</activity>

<exercises xml:id="exs_permutations">
  <exercise>
    <statement>
      <p>
        The five-cycle <m>\sigma = (12345)\in S_5</m> performs the anagram <m>TEAMS \mapsto STEAM</m>.
      </p>
      <ol>
        <li>
          <p>Sketch a braid-a-gram that shows how to express <m>(12345)</m> as a composition of the adjacent transpositions <m>(12),(23),(34),</m> and/or <m>(45)</m>.
          </p>
        </li>
        <li>
          <p>Use a braid-a-gram to determine an <em>inverse</em> for <m>(12345)</m>, both as a composition of adjacent transpositions and as a (single) cycle.
          </p>
        </li>
        <li>
          <p>Explain in a few sentences how your answer to (a) might generalize to cycles of any length, and what it tells us about <xref ref="thm_adjacent"/>.
          </p>
        </li>
      </ol>
    </statement>
  </exercise>

   <exercise>
    <statement>
      <p>The <term>order</term> of an element <m>\sigma \in S_n</m> is the smallest positive integer <m>k</m> for which <me>\sigma^k := \underbrace{\sigma \circ \sigma \circ \cdots \circ \sigma}_k = \epsilon.</me>
      For example, the transposition <m>(13)</m> has order 2 since <m>(35)\circ(35) = \epsilon</m>, as the braid-a-gram below shows.
      </p>
      <figure xml:id="fig_order2">
        <caption>A braid-a-gram demonstrating that <m>(13)</m> has order 2.</caption>
        <image source="images/gif_order2.gif" width="50%"/>
      </figure>
      <ol>
        <li>
          <p>
            For the three-cycle <m>\sigma = (345)\in S_5</m>, sketch a braid-a-gram showing the effect of the permutations <m>\sigma, \sigma^2, \sigma^3,</m> and <m>\sigma^4</m> on the word <m>BEAST</m>. 
          </p>
          </li>
          <li>
            <p>What is the order of the permutation <m>\sigma = (345)</m> according to your answer in (a)? Why?</p></li>
        <li>
          <p>Following a similar strategy as the above, determine the order of the permutation <m>\tau = (13)(245)</m> via a braid-a-gram of its powers acting on the word <m>LAPSE</m>. (Not all will be English words.)</p></li>
        <li>
          <p>Predict the order of the permutation <m>\kappa = (148)(273956)</m>, based on your previous answers. Explain.</p>
        </li>
      </ol>
    </statement>
  </exercise>
  
  <exercise>
    <statement>
      <p>Fill in the blank, and provide a proof: <me>S_n \text{ is an abelian group if, and only if, }\underline{\hspace{1in}}.</me>
      </p>
    </statement>
    <hint>
      <p>An operation table would suffice to prove the <q>is abelian</q> case. A specific counterexample to the commutative property would suffice to prove that <q>is not abelian</q> case.
      </p>
    </hint>
  </exercise>
 

</exercises>  


</section>